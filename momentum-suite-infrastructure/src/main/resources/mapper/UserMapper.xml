<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.momentum.suite.infrastructure.persistent.mapper.UserMapper">

    <!--
        ResultMap: 用于定义数据库查询结果集与 Java Pojo 之间的映射关系 。
        这是最核心的部分，确保了字段的正确映射。
        id: ResultMap 的唯一标识。
        type: 对应的 POJO 类的完整路径。
    -->
    <resultMap id="BaseResultMap" type="com.momentum.suite.infrastructure.persistent.po.UserPO">
        <!--
            <id>: 用于映射主键字段。
            property: Java 对象的属性名。
            column: 数据库表的列名。
        -->
        <id property="id" column="id"/>

        <!--
            <result>: 用于映射普通字段。
        -->
        <result property="username" column="username"/>
        <result property="encryptedPassword" column="password"/>
        <result property="email" column="email"/>
        <result property="mobile" column="mobile"/>
        <result property="enableFlag" column="enable_flag"/>
        <result property="createId" column="create_id"/>
        <result property="createName" column="create_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateId" column="update_id"/>
        <result property="updateName" column="update_name"/>
        <result property="updateTime" column="update_time"/>
        <result property="delFlag" column="del_flag"/>
    </resultMap>

    <!--
        在这里可以定义自定义的 SQL 查询。
        例如，一个根据用户名连接查询角色信息的方法。

        <select id="findByUsernameWithRoles" resultMap="BaseResultMap">
            SELECT
                u.*, r.role_name
            FROM
                t_user u
            LEFT JOIN
                t_user_role ur ON u.id = ur.user_id
            LEFT JOIN
                t_role r ON ur.role_id = r.id
            WHERE
                u.username = #{username} AND u.del_flag = 0
        </select>
    -->

</mapper>
